// Code generated by go-bindata.
// sources:
// assets/server/tls/snakeoil.crt
// assets/server/tls/snakeoil.key
// DO NOT EDIT!

// +build release

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsServerTlsSnakeoilCrt = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x93\xb9\xd2\xb2\x4a\x03\x84\x73\xae\xe2\xcf\xdf\xfa\x4b\x36\x45\x82\x2f\x18\x66\x00\x07\x1c\xf6\xd5\x4c\x44\x86\x45\x16\x45\x18\xf4\xea\x4f\x7d\x6f\x78\x4e\x87\x5d\x1d\x74\xd5\x53\xcf\xff\xff\x46\xd3\x4d\xec\xfc\x0f\xea\x41\x84\x0d\x0c\x41\xa4\xff\xb6\x1c\xc1\x18\x0a\x2d\x84\xa0\x38\x50\xc0\xb0\x06\x28\xb6\x80\x1b\xde\xcd\x5b\xcf\x7f\x99\xbd\x10\xc0\x9b\x30\x7c\x9a\x21\x2e\x24\xe4\xeb\x9a\xe6\xc7\x80\x68\xf9\x66\x20\x10\x6a\xd4\x49\x38\x0d\x10\x02\xc5\xfd\x70\xeb\xd5\xd7\x79\x30\x84\x4b\xe6\xf0\x04\x82\x0c\x45\xf8\x4b\x10\x61\x4e\x04\x98\x13\x51\xe6\x24\x63\x8e\xbe\x84\x91\x16\x33\xe7\x0b\x44\x82\x80\xe0\x22\x20\x70\x69\x0b\x52\x12\xf8\x4c\xa7\x39\x4a\x7c\x1f\xe9\xec\xbd\x5c\x24\x6b\xbd\x7e\xf6\x5b\x99\x26\xdf\x12\x41\x08\x42\xcc\x90\x9f\x5b\xf6\x78\xc1\xf5\x7a\x73\xc0\xef\x13\x80\x28\xd5\x3d\x0e\xfc\x1d\xf8\x23\xa4\x54\xd7\x00\xc1\xcf\x10\xe7\xf7\x8d\xd8\x7c\x65\xce\xfb\x74\x6f\x5d\x66\x70\xb8\x61\xeb\x69\xc8\x8c\x39\x69\xd6\x11\xa1\xbc\xc7\xb8\x3c\xd7\xc7\x2d\x9a\x49\xfd\x40\x9c\xb7\x0b\x03\xb1\x6e\x4c\x51\x46\xaf\xaf\x2c\x20\xf7\x24\x6f\xdb\x5b\xf9\x59\x06\x19\x2b\xc6\x72\xf7\xd2\x17\x74\x94\xb5\x17\xeb\xe2\x92\xab\x82\x30\xdb\xb1\xf6\xcd\xce\x3b\xe1\xfe\x81\x42\x36\xec\xb8\xba\x52\xde\x28\x7e\x8c\xc3\xcd\x43\x82\x10\xab\x01\xa4\xc3\xde\x55\x7f\xe8\x1a\x26\x7b\xfa\x96\x4c\x57\xfa\xc4\x5f\x41\x2c\x8c\x5a\xb8\x2a\x44\x36\x8f\xa9\xd4\xa7\xb6\xd1\x0e\xa7\x7e\x5f\x48\x2d\x17\x2f\x66\x8d\x2e\x5d\xbd\x3f\x4e\xe8\xfd\x91\xab\x1f\x73\xce\x5c\xb4\x0b\x77\xe7\x47\x26\xae\xa2\xf2\x8e\x8f\xa3\xfb\x38\xaf\x93\xc2\x68\x37\x9a\xe7\xd3\xc6\x17\x27\x31\xd3\x60\xe3\x7c\xdc\x75\x77\xe7\xf4\x32\xb3\x54\x2f\xda\xc9\x3c\xa8\xc5\x81\xb7\xe6\x6a\x28\x32\xa1\x91\x42\xe7\x61\x88\x5e\x64\x20\x49\x0c\xa8\xf2\xde\xd9\x83\x17\xdb\xae\x54\x84\x66\x1b\xd8\x1d\xe5\x77\x65\x0d\x3b\x97\xd8\x5c\x93\xcf\xc2\x89\x67\xa0\x9d\x42\x8d\xa7\xd1\x89\x12\xde\x2b\xef\x67\x39\xf3\xd2\x80\xbe\x96\xde\x66\x1d\x04\x4c\x07\xe0\x4a\x1e\x04\x12\x86\xfd\x1c\x25\x01\x1f\x68\xda\xc8\x4c\x8c\x2d\xae\x30\xd5\x36\x4f\xb7\xb1\x90\x1c\x9e\xd2\x7f\x23\x04\x8e\x46\xbb\x67\xdd\x35\xa6\xca\x78\x0d\xf8\xb1\x01\x80\x0b\x81\xaf\x83\x67\xb1\xdd\xc8\x74\xdf\xb8\x40\x88\xa2\x05\xc6\xad\x0c\x94\x6b\x49\x4b\xf6\xd3\xac\x35\xb0\x2a\xa3\xc8\xdd\x32\x42\xb2\x91\x74\xc2\x53\xca\xac\x63\xfa\x6d\x2b\x43\x3e\x44\x9f\x4b\xd4\xf2\xcb\xbb\x7c\xae\xc9\x38\xa5\x73\xca\x95\xc3\xe9\x4a\xbc\x79\xc2\x9d\x0a\x57\xf6\xb9\xab\x72\x75\xec\xa1\x10\x0d\xfb\x23\x4e\x5b\xcd\x2a\x8f\x42\xf1\xc1\xc3\xcb\x6f\x0e\xe1\x78\x36\xa7\x5d\x5b\x29\xb2\xb7\x7b\x9b\xcb\x56\xc5\xeb\xc6\x38\x38\x3f\x9b\x83\x92\xf0\x3f\x93\xe4\x41\xff\x30\xe1\xed\x60\xb5\x0b\xad\x14\x35\x44\xf3\x2b\x72\xfb\x8d\x87\x73\x63\xc1\x83\x89\xba\xf8\x34\x2f\x6b\xcf\x5e\x4b\x79\x1b\x71\xe7\xd6\x65\x77\x6d\xb8\x45\x96\x32\xe3\x50\x11\x5b\x54\xd3\xfd\x72\xf1\xf8\x3c\x0c\x93\xd7\xd4\x6b\x4b\xb2\x10\x7b\xb8\x74\x5b\x6d\xe7\x57\x6b\xc4\x85\x7e\x68\x50\x6a\x7d\x95\x8b\xb5\x53\x0a\xd0\x3b\x2b\x7e\x04\xf8\xc6\x9d\x82\x9f\xbd\x53\x9c\xd5\x20\x4e\xeb\xc9\x96\xcf\xe7\xe4\xa2\xb4\xd9\x5a\x59\xa4\xf0\x8b\x49\xa8\xb2\x16\x24\x4f\x78\xb0\x52\x10\x1a\xd3\xdb\xd8\x8e\x0d\xe4\x1b\x80\xe5\xc6\x35\xa5\x6f\x6f\x4c\x5c\x2f\x95\x55\xd1\x87\xc7\xf5\xc6\x06\xdf\xff\xf3\x87\xfb\xb5\x5c\x77\xd0\x7f\xcd\xff\x27\x00\x00\xff\xff\xee\x83\x4a\xff\x16\x04\x00\x00"

func assetsServerTlsSnakeoilCrtBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilCrt,
		"assets/server/tls/snakeoil.crt",
	)
}

func assetsServerTlsSnakeoilCrt() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.crt", size: 1046, mode: os.FileMode(420), modTime: time.Unix(1677977885, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsServerTlsSnakeoilKey = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\xb7\x12\xab\xc8\x02\x04\xd0\x9c\xaf\xb8\xb9\xea\x15\x1e\x44\xb0\xc1\xe0\x07\xc4\xe0\x04\x02\x32\x3c\xc2\x09\xe1\xc5\xd7\xbf\xda\x1b\x6f\xa7\x9d\x74\x75\x72\xfe\xf7\x6f\x44\x45\x83\xe8\x8f\xe7\x83\x3f\x8e\x07\x43\xf0\x54\xfe\x98\x4a\xfc\xb7\xc1\x2c\x08\x95\x09\x40\x11\x00\x53\x02\xae\x02\x8e\xf7\x04\x9b\x86\x57\x8e\xd9\xbb\xa7\x57\x9f\x75\xfd\x70\xc8\xd3\x51\x0f\x9f\xa8\x95\x01\x99\x94\xee\x15\x92\xac\xdb\x10\x9b\x7e\xa9\xf6\xf1\xc3\xb4\xc0\xc2\x05\x43\x4f\x35\x98\x65\xb5\xbd\x3b\x6d\x60\x31\x55\xab\x6b\xf4\xce\x71\x55\xdd\x2e\x2f\x96\x11\xd2\x05\xd2\xdb\x2d\x4b\xd5\xb5\x6f\xe9\xe8\x75\x4c\xae\x8e\xf2\x1d\x0f\x79\xf8\x08\xb1\xb2\xba\xa9\xf8\x46\x20\xff\xf5\x2e\x8e\xbb\x13\x85\x4f\x52\x31\xa5\xaa\xe3\x69\x4e\x12\x8c\x68\x90\xe8\x3c\xe6\x2b\xe3\xe9\x44\xc9\xf2\xd2\xc3\x79\xb9\xea\xec\xcc\xca\x24\xfe\xbc\xec\xbc\xcc\x7a\x6c\x2f\x91\xcf\xa4\x0a\x1a\x7c\x7d\xfc\x75\x36\xfd\x68\x70\x26\x3d\x73\xc6\x11\x1e\xf7\x2d\xac\x52\x3c\xdb\xc8\xe7\xaf\xe6\x82\xed\x36\xee\x92\xe4\xd7\xf1\x52\xe9\xde\x52\x25\xb9\x62\x42\x1a\x72\x18\x2e\x30\x1e\x99\x8f\x84\xe0\xe0\xad\x2b\xe9\x69\xe5\x0e\xe7\xad\x58\xab\xd7\xa3\x80\x54\x10\xc5\x82\x15\x38\x55\xa2\xc9\x1b\x7d\xff\xe6\x82\xfb\xe1\x8b\x15\xa6\x48\xf9\xfa\xf2\x53\xa0\x14\xd3\xc5\x98\xe3\x6b\xbc\xaf\xa0\x7a\x02\xc9\xee\xa1\xee\x8b\x56\x09\x2e\x57\x20\x99\xbd\xc9\x85\x44\x93\x36\x2e\x9e\x25\x17\xca\xc0\x05\x22\xf8\x40\x11\xb8\x92\x22\x1c\xf8\xd3\xf7\xf8\xb0\xa0\x9c\x3b\xf6\xcb\xbe\x3c\xdf\x09\xbf\xa5\x68\x9a\xdb\x8b\xf1\x8f\x55\xf3\x59\x50\x20\xb3\x77\xf1\xa4\x39\x1b\x83\xe5\xc7\x67\x95\x6c\x28\x43\xa4\xad\x3d\xd9\x10\x5a\x02\x57\x7c\x29\xc5\x12\x77\xf2\xa5\x8a\x98\xdc\xae\xb6\x3b\xde\x97\xd9\x71\x0b\xee\xd5\xbb\x91\xc6\x47\x66\xa1\x96\x8f\x81\x7e\xc6\x3b\x6e\x35\xcc\x69\xb4\xcc\xa3\xfd\x20\x13\xd6\xdb\xa1\x23\x10\xff\xde\x21\xbc\xb2\x84\x33\x3e\xf7\xfe\x8b\x85\xd1\xa5\x38\xcf\x45\x45\x38\x39\x49\x39\x80\xdd\x4d\x12\xfc\xe9\xce\xa1\x53\x91\x51\x81\x0b\xc1\xa5\x97\x8b\xf7\xdb\xc0\xc5\x1a\xcd\xcd\x30\x3c\x98\xd5\xec\xf0\x3d\xcb\xe5\x27\x2d\x60\x3b\x31\xbe\x24\x46\xa4\xd1\x36\xfd\x81\x9f\xdb\xaf\x49\xd9\x02\x1a\x8d\x39\xd4\x94\xb6\x13\x75\x26\x27\x63\x4f\x14\x57\x18\xdf\x7e\x6a\x45\xce\x41\x1b\xd3\xb3\x68\x7b\x37\x77\x79\x7e\x1d\x62\x8b\xac\x04\xc3\x49\x7a\xc2\xa3\x97\x52\x04\x78\x4a\xce\x9c\x2a\xfa\x5c\x76\x9b\x24\xe3\x12\xbc\xb1\xe6\x42\x68\x79\xe8\xf5\x7d\x4d\xf3\x2a\xda\x0f\xa0\xbc\x92\x4b\x9e\x9d\x9c\x5b\x77\xd5\x44\x5f\x0b\x84\x3d\x66\xc3\x61\xc8\x9c\x7f\x1f\xd6\x44\xe0\xa4\x49\xff\x6e\x69\x4e\xa3\xf1\x8f\x73\x5a\xcb\xbd\xc2\x03\xe9\x08\x37\x35\x5a\x7c\xe5\x74\x88\x05\x70\xb6\x6a\x6e\x46\xb7\x32\xc0\x8c\xfd\x4b\x4b\x18\x4c\xc4\x0b\x32\x4c\x6e\x51\xbb\x36\xfc\x3b\x69\x83\x83\xe8\x4a\x18\xb4\x34\xc1\x3c\x8f\x43\x8b\x9d\xe2\x73\x70\x8a\x9a\xc9\xf5\x0f\xb2\x14\x4f\xf6\x73\xa0\xf3\x95\xaf\xfd\x78\x57\xc6\xa3\xf8\x8d\xb0\xd6\xd4\x49\x22\x09\x1f\x45\xe0\xab\x66\x4e\x19\x17\x4f\x24\x82\x4c\x8b\xce\xa7\xef\x7a\x00\xdd\xd2\xe4\xed\xee\xb8\x7d\x1d\x47\x94\x54\x71\x6a\xb2\x2d\xdd\x6e\x59\xdb\xfc\x5d\x6c\x0d\x1e\x26\x5a\xf7\x2c\xbe\x7e\x7b\x0e\xf3\x4e\x6e\xa7\xd8\x72\x19\xea\x9d\xd9\x97\x32\xd6\x1c\x44\x0e\xda\x9f\x5c\xf3\x7a\x52\x83\x39\xb2\x3d\x72\x9c\xf5\xce\x75\x99\xbd\xc4\x06\x7d\x9a\x5c\xc5\x58\x26\x66\x64\x3b\x8d\xa8\x63\xba\xf0\x71\x83\x19\xb7\x8b\x14\x7b\x63\x98\xf2\x5d\x8e\x31\x7f\x65\xb5\xd3\xd6\x3f\xe7\x2a\xdb\xf4\x81\x4b\xa5\x69\xac\x12\x6b\x58\xc9\xe1\x2c\x89\x69\xd0\xa8\xea\x66\x0e\x23\x24\xd1\x7d\x64\xbc\xa8\x8f\x9d\xb7\x0b\x3c\x15\xc7\xc7\xa9\x75\x79\x1b\x4d\x03\x35\x5f\x3f\xf2\x41\xf9\x1f\x67\xb8\x4f\xe0\xa3\x01\x43\x17\xd5\x02\x88\x88\x15\xad\x9e\xf9\xc2\x37\xfd\x4d\x47\x2c\x6a\x4e\xbd\xb1\x66\x23\x14\xc9\x31\xdf\xea\x31\x1f\xc1\x19\x68\x94\x2e\x1d\x16\xa1\xd9\x20\x9b\x03\x85\xf4\x73\x47\x8f\xef\x94\x10\x13\xfb\xaa\x93\x17\x4c\x7a\x27\x2e\xe3\x66\x9a\xd2\x25\xc3\xbc\x30\xc0\x75\xf4\xc0\xa5\x78\x9b\xa1\x49\x4e\x9d\x31\x2d\xfb\x09\xd5\x17\xe5\xd5\x43\x21\x1f\xdb\x46\xcf\x7c\x5b\xe6\xb6\x56\x29\x5c\xcc\xd0\x83\x14\x89\xd3\x8b\x5d\x3e\xd7\x7b\x2d\x5a\xa9\xc6\x58\xc3\x66\x77\xf2\x11\x14\xfd\x81\x3c\xed\x3d\x3d\x3f\x81\x52\xc6\x8a\x54\xc7\x40\x2d\x4f\xfd\x9e\x70\x87\xa0\xcb\xa0\xd0\x8d\xaa\xcc\x3b\x74\xa1\xe8\x5c\x65\x1d\x51\xfa\x8b\x93\x15\x21\x77\xb0\x72\x2b\x3f\x3e\x3d\xd5\x41\xe4\xae\x46\x4e\x30\xcf\x72\x11\x2c\x62\x93\x6b\xf4\xfd\xed\x74\xd4\x22\x58\x8e\x2e\xe1\x98\x79\x15\x2c\x77\xa9\x5f\xbb\x6c\xf8\x69\xfa\xe3\x03\xc4\xd3\x60\x76\xa3\xc5\x28\x97\xf8\x7a\x99\xaf\x00\xad\xdd\x1c\x21\x6c\xdd\x09\x4a\x47\xc1\x96\xb4\xf8\xf2\x24\xf5\xca\x13\x51\xe3\x22\x71\xdc\x44\x64\xc3\x73\x64\x95\x86\xed\xd5\xa0\x9c\xdf\xfd\xb9\xb8\x6b\xec\x4b\x58\xfc\x6e\x41\xee\x9a\x62\xed\xca\xe8\x97\x7a\xfc\x94\x50\x8e\x46\x66\xcc\x66\x85\x2c\xc3\x44\x6e\xef\xd6\x74\x17\xd8\x49\x4b\x85\xe6\x61\x8d\x72\x27\xe0\xf3\xb4\xf5\x69\x33\x0f\x3e\x7d\xcf\x1a\x4c\x33\x80\x71\x56\x1b\x51\x52\x38\xe2\xdf\x22\xba\x85\xab\x75\x4b\x9e\x9c\x7d\xcf\xe4\xf5\xb2\xb6\x87\xe2\xd6\xbe\x79\x38\x6f\x46\xde\xa5\xf4\x7b\xc3\xdd\xdf\x70\x2e\xdf\xee\x33\x84\xfa\xbd\x88\x47\xcc\x32\x28\x81\x66\x21\x35\x48\x63\x44\xf2\x8b\xa9\x7a\x05\x48\xde\xc7\x4a\x94\x7a\xc3\x0e\xf9\x6a\xc8\x8d\x8d\x9c\x43\x9f\x70\x99\x4a\x79\x66\x8e\xe5\x77\x6f\x1c\xff\xfc\x83\xfd\x65\x45\x41\xf2\x7f\x73\xf3\xff\x00\x00\x00\xff\xff\xc0\x0a\x7f\xf7\x8f\x06\x00\x00"

func assetsServerTlsSnakeoilKeyBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilKey,
		"assets/server/tls/snakeoil.key",
	)
}

func assetsServerTlsSnakeoilKey() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.key", size: 1679, mode: os.FileMode(420), modTime: time.Unix(1677977885, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/server/tls/snakeoil.crt": assetsServerTlsSnakeoilCrt,
	"assets/server/tls/snakeoil.key": assetsServerTlsSnakeoilKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"server": &bintree{nil, map[string]*bintree{
			"tls": &bintree{nil, map[string]*bintree{
				"snakeoil.crt": &bintree{assetsServerTlsSnakeoilCrt, map[string]*bintree{}},
				"snakeoil.key": &bintree{assetsServerTlsSnakeoilKey, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

