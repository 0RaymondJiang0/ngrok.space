// Code generated by go-bindata.
// sources:
// assets/server/.DS_Store
// assets/server/tls/snakeoil.crt
// assets/server/tls/snakeoil.key
// DO NOT EDIT!

// +build release

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsServerDs_store = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd8\x31\x0a\x02\x31\x10\x85\xe1\x37\x31\x45\xc0\x26\xa5\x65\x1a\x0f\xe0\x0d\xc2\xb2\x9e\xc0\x0b\x58\x78\x05\xfb\x1c\x5d\x96\x79\x60\x60\xd5\x4e\x8c\xcb\xfb\x40\xfe\x05\x37\x2a\x16\x31\x23\x00\x9b\xee\xb7\x13\x90\x01\x24\x78\x71\xc4\x4b\x89\x8f\x95\xd0\x5d\x1b\x5f\x43\x44\x44\x44\xc6\x66\x9e\xb4\xff\xf5\x07\x11\x91\xe1\x2c\xfb\x43\x61\x2b\xdb\xbc\xc6\xe7\x03\x1b\xbb\x35\x99\x2d\x6c\x65\x9b\xd7\x78\x5f\x60\x23\x9b\xd8\xcc\x16\xb6\xb2\xcd\xcb\x4d\xcb\x38\x7c\x18\xdf\xd9\x38\xa1\x18\xa7\x10\x2b\x6c\xfd\xce\x77\x23\xf2\xef\x76\x9e\xbc\xfc\xfe\x9f\xdf\xcf\xff\x22\xb2\x61\x16\xe7\xcb\x3c\x3d\x07\x82\xf5\x0d\x00\xae\xdd\xf5\xa7\x43\x40\xf0\x3f\x0b\x0f\xdd\x5a\x1d\x04\x44\x06\xf3\x08\x00\x00\xff\xff\x6a\x00\x88\x6d\x04\x18\x00\x00"

func assetsServerDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerDs_store,
		"assets/server/.DS_Store",
	)
}

func assetsServerDs_store() (*asset, error) {
	bytes, err := assetsServerDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/.DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1636257513, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsServerTlsSnakeoilCrt = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xd3\x3b\xf3\xaa\x38\x00\x05\xf0\x9e\x4f\xb1\xbd\xb3\x03\x82\xf2\xc7\xe2\x16\x21\x09\x18\x21\x91\x20\xa8\xd0\xf1\x7e\x8b\x2f\x88\xf2\xe9\x77\xee\x2d\xf7\x9e\x99\xd3\x9c\xf6\xcc\xef\xdf\xdf\x31\xb1\x4d\xd8\x3f\x10\xfb\x01\xb1\x08\x04\x01\xfe\xb3\x4a\x94\x10\xb8\x6e\x21\x04\xa9\x5e\x01\x41\x4c\x50\x91\x03\xa0\xae\xee\x3f\xcd\x1a\x9d\x9d\x1d\x05\x8a\x0d\x4f\x0f\xfb\x44\x52\x0d\x71\x6c\x42\x11\x02\x6a\x46\x1f\x0b\x81\x93\x59\xb1\xb3\x64\x02\x4a\xa1\xba\xbd\x65\xc3\xee\xe9\xde\x98\x88\x2e\xac\xa7\x10\x5c\x51\x40\x3e\x34\x00\x1f\xd6\x82\x35\x45\xd9\xc2\xd6\x63\x84\x16\x2a\x68\x8b\x7f\x57\xa5\x28\x14\x6c\xa1\x9a\x74\x69\xc1\x85\xfa\x5c\xe0\x2a\x42\x67\xce\x11\x16\xef\x29\xd6\x0e\x73\xf2\xdd\x2e\x99\x6d\xb5\x71\x00\x21\x38\x11\x81\x78\x74\x70\xc6\x98\xd4\x73\xc6\x00\xc7\xa6\xc9\x01\xaa\x2a\xec\x49\x00\x41\x08\xf8\x08\xab\x0a\x9b\x80\x86\x6e\xc2\x64\xae\x5e\x7d\xc7\x0e\x2e\x71\x12\xa7\x9b\x6b\x51\x0d\x33\xf7\x4b\xbc\x8a\x95\x6d\x71\xf4\x97\xf2\x94\x34\xce\x42\x96\xfd\x54\x77\x2d\x8b\xa5\xfc\x3d\x01\xc8\x90\x48\xfb\xb5\x0c\xe2\x6a\x59\x05\xfa\xb2\x2c\x3a\x72\xe3\xfd\x26\x2d\xe9\x51\xd9\x75\x56\xad\x4c\x61\x84\x0c\x5d\x89\x5c\xc0\x1e\x42\x51\x1b\x93\x99\xc1\xdb\xd9\xd7\xcb\x49\x0a\xec\x9a\x26\x4e\xdf\x0d\xa3\x91\x6d\xa3\xde\x85\x5f\x43\x0f\x8e\xae\x3c\x45\xde\xd9\x73\x7d\x83\xbf\x37\x63\xb1\xc7\x66\xa4\x5d\xa6\x22\x1b\x4f\x47\xd5\x4d\x9f\x70\xdd\xc6\xce\x02\xea\x9b\x4d\xa4\x26\x71\xee\x3f\xd4\xed\x37\xdb\xfe\x14\x3a\xd1\xfa\xab\x97\xf9\x28\xd0\x75\x15\xa5\xec\xf8\x4c\xe4\x26\x5b\xf4\xb3\x5a\xf4\x09\xce\x4f\x0f\x74\xf3\x40\x96\x30\x0b\x97\xeb\x44\xce\x0d\x3e\xbf\x62\xa9\xe9\x0c\xd1\x3a\x3e\xaf\x91\x46\xbd\xac\x4c\x06\xc3\x3b\xc4\x37\x11\x66\xf0\xa6\x68\x86\xbd\xa4\x28\x7a\xc9\x6c\xf5\x4d\xd9\xec\xf8\xdf\x02\x9e\x3a\x77\xb6\x7f\xe4\x90\xe0\xcd\x93\x24\xf6\x4a\x22\x76\x32\xd7\xde\xde\xeb\xeb\x03\x8e\x59\xec\x8a\xea\xb8\xba\xdc\x47\x92\xff\x60\x1f\x3f\xde\x51\x53\x60\x08\x04\x06\x20\xa1\x3d\x85\x54\x10\x1e\xa1\xb3\xaf\xf8\xa6\x39\x0a\x9b\x90\x83\x94\xda\xbb\x36\xba\x7c\xc6\x54\x63\x4a\x55\xfd\xff\x42\xc0\xcc\xaa\x7b\xd4\x5d\x63\xef\x84\x62\x02\xfe\xb2\x00\x38\x42\xc0\x31\x70\xd1\xaa\x50\xf8\xf6\x26\xf5\xfc\x6c\x5d\x86\x28\xa8\x6e\x6c\x7f\xbd\x5f\xf4\xe3\x23\x6f\xc8\x6c\xb0\xf1\xa0\xf6\x65\x0b\x54\xe2\x9b\x87\x9f\xf2\xb8\x1b\xeb\xc5\x0d\xdf\x86\x7a\x40\x9b\x73\xf9\xc1\xb8\xdb\x3a\x9f\x2d\x9a\x2c\xa9\x79\x83\xa0\x28\xda\x0c\x77\xa3\xde\x00\x7e\xdf\x3c\xc2\xdd\x95\x97\x45\xdb\x6e\x6a\x21\xc4\x02\xe3\x83\x9b\x6d\xbf\x74\xcd\x0f\x3a\xae\xcc\xe7\xa0\xe5\x69\xb8\x56\x17\x9e\xab\xca\x2c\xc2\x52\xca\x6e\x5e\xce\x0b\x1b\x0f\x4a\x12\xf5\xc6\xe3\xa2\x69\x0b\x30\x99\x06\xa3\x01\x06\xfb\xd7\x64\x1f\xbb\x2c\xe8\x1e\x93\x30\xe4\xbd\x19\x77\xd7\x02\x3a\x6b\xe2\xbf\x56\xf1\x16\x9a\x95\x50\xee\xad\x34\xd9\xe8\x1e\xb4\xab\x5d\x3d\xce\x0d\xcf\x19\x31\x5e\x79\xc3\xce\xcb\xd2\xc4\xbb\xaf\xfb\x7d\x0f\x79\x75\xef\x48\x37\x58\x18\x6b\xfd\xcf\xf0\x79\x9d\x7d\x73\xfd\xc9\x9c\x56\xbc\xf7\xd6\x3a\xf9\x29\x24\x4f\x16\x48\xec\x37\x6c\x78\x31\x2b\xbb\xf7\xfb\xb0\x20\x0f\x95\xac\x6e\x70\x12\xd7\xab\xf5\xdd\xb5\x51\x29\xcf\x19\xe4\xba\x27\x7f\xa7\x55\x5a\x9d\xb7\x1c\x4f\xf2\x71\x7e\x2b\xfd\x4b\xf6\xa6\x56\xfa\x80\x8d\x9b\xa3\xb4\x0b\x1b\x35\xd5\xaa\x5f\xbf\xa4\x3f\xca\x31\x43\x7f\xcb\xff\x2f\x00\x00\xff\xff\xa8\x52\xc2\x9e\x16\x04\x00\x00"

func assetsServerTlsSnakeoilCrtBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilCrt,
		"assets/server/tls/snakeoil.crt",
	)
}

func assetsServerTlsSnakeoilCrt() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.crt", size: 1046, mode: os.FileMode(420), modTime: time.Unix(1634360857, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsServerTlsSnakeoilKey = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\xb7\x12\xa3\xd0\x01\x85\xe1\x9e\xa7\xd8\x9e\xf1\x88\x1c\x0a\x17\x97\x20\x32\x22\x09\x01\x1d\x39\x73\x89\x02\xf1\xf4\x9e\xdd\xda\xa7\x3d\xcd\xdf\x7d\xff\xf9\x3b\x41\x56\x34\xfb\x8f\xe7\x83\x3f\x8e\xa7\x85\x20\x90\xff\x18\x72\xfc\xef\x41\x2c\x4d\x93\x61\xad\x09\x00\x18\x22\x70\x65\x70\xb9\x3b\x24\x79\x29\x29\x64\x98\xd8\xc9\x30\x0f\xdf\xa6\x60\xc4\x94\x17\x9e\x5c\x40\x4f\xc1\x40\xd1\xaa\xcd\xeb\x8b\xb6\x5a\x9d\x55\x32\x8a\x8f\x58\xf8\x40\x10\x14\xd0\x30\x47\x38\xa2\x88\x13\x46\xc9\xa1\x9d\xd5\x71\x1c\x68\xed\x7d\xd5\xec\xdc\xc9\x06\x84\xfb\x51\x7d\xda\xab\x9d\x7b\xf5\xea\x0d\x10\xab\x14\xa4\x9a\x8c\x3d\x5f\x18\x2c\x11\xd5\xd6\xad\x54\xbe\xe0\xf2\xf1\xd3\xee\xba\x87\xf6\xbd\x99\xe6\x3d\x5b\xd4\x17\xa5\x6b\xfe\xcd\xed\xea\x25\x92\x6d\x43\xe5\xee\xb3\x2b\x52\x9a\xfe\x35\x1a\x1b\xef\xc7\x66\x7e\xec\x7e\xb5\x44\x05\xc9\xe3\x56\x87\xcb\xb4\x9d\x47\xd4\x8d\xa1\xee\xce\x5d\x64\xce\x3c\xd1\x01\xbb\xa2\x9b\x0d\x63\xf6\x15\xd5\x6f\x67\x8e\x12\x26\x84\x1e\x6e\xc0\x57\xce\x09\x17\xc4\xde\xde\x23\x5c\x79\xf2\x12\x11\xf4\x1a\x8d\xe0\x16\xad\xf9\x29\xca\x4e\x7e\xf2\x17\xbf\x64\x27\x37\x8c\x95\xe0\x9d\x46\x15\x54\x67\x66\x6f\x76\x7b\x73\x24\xab\x6f\x04\x37\xab\x3a\xa5\x1b\xee\xc1\x65\x5f\xde\xad\x83\x76\x6b\x10\x98\x51\x75\xb2\xa0\x32\x97\xa3\x1f\xb9\xf7\x7a\xbc\xff\x8a\x80\xa5\xd3\xb1\x6e\xc8\xcd\x93\xfd\x05\x6f\x75\xca\xd5\x24\xe0\x02\x01\x40\x4d\x00\x6a\x1f\x9b\x55\x81\x76\xe3\xbb\xb0\x8d\xee\x44\xc0\xaf\xa6\xb6\x1d\xe7\x65\xdf\x6f\xc7\xdc\x93\xda\xcb\xc3\xc0\x6a\xbc\xc3\x4a\xa7\x69\x5b\x7e\xe2\x4b\x59\x4b\x34\x6a\x33\x3c\x96\xeb\x51\x01\x95\x8e\x95\xfa\xf6\xb3\x6c\x04\xd3\x35\xf8\x74\x21\xf4\x09\x38\x42\xbb\x25\xc9\x4d\xaf\xcb\xf5\x3f\x77\x60\x35\x43\x54\x91\xf9\x2f\x3a\x56\xea\xea\x23\xe5\xfd\x13\x8d\x0d\xa4\xbd\xea\x0a\xd5\x85\x6f\xf9\xea\x7b\xcc\x90\x0e\x07\x99\xc6\xbb\xf7\x41\x2c\xfe\x9a\xfa\x8f\x58\x86\x30\xe1\x92\x47\x31\xce\x10\x72\x5c\x0b\x97\x07\x7c\x86\x2e\x1e\x83\xb8\xa1\x98\xa8\xac\x53\xdb\xdf\xab\x93\x8d\x49\xc8\x51\x27\xab\x47\x53\xde\xf9\xb6\xd8\xa9\x29\x32\x06\xa3\x66\xc4\x60\x6e\x9d\x6d\x50\x39\x71\x62\x58\x5f\xfe\x96\x66\x80\x46\x85\x9a\xdb\xe5\x2d\x7f\xca\x62\xb9\x22\x1e\x15\x2b\xae\x50\x89\x5f\x0b\xd7\x86\x7b\xba\x22\x57\xb5\xbf\x13\xf8\x2d\xc2\x8e\x0c\xcd\xc5\x0e\x3d\x89\xa4\x94\xb6\xec\xc3\x73\x5d\x57\x13\xc4\x42\x8b\xeb\xae\x51\xbe\x87\x1c\x70\x09\x4c\x72\x2f\x5d\xfb\x50\xda\x3b\x5d\xcf\x05\x8b\x8c\x8c\x75\x9b\x2f\x3d\x14\xd4\x14\x11\x39\x49\xc9\x43\x59\xac\x63\x19\x70\x72\x27\x29\x96\xcd\x10\x1c\x9c\x7b\xfb\x62\xe2\x1c\x8b\x48\x06\x15\x6c\x72\x13\x48\x35\x51\xa3\x34\x18\x44\x28\xe9\x8f\x2a\xe0\x3b\x45\xb1\xd9\xd7\xe1\x23\x21\x8b\xbb\x0e\x43\x68\x61\x7a\xb5\x35\xc1\x12\x65\xff\xd2\x50\xfe\x8a\x83\x72\x84\x13\x75\x1e\x05\xc8\x77\x23\x98\x1f\x57\xb8\xa1\xf9\xd7\xe4\xc5\xd9\x1e\x81\x39\x27\xc9\x12\x37\xb5\x19\x8a\x08\x8b\x6e\x74\xf4\x5b\x5f\x65\x9a\x04\x57\xfc\x44\x3b\x6a\x1a\xde\x99\xc0\x64\x55\x1f\xf8\x4d\xda\x7e\x5c\xfd\x92\x58\x71\x75\x5e\xdf\xb7\x2c\x72\x4e\x1d\x0b\xf8\x46\xe6\xff\x8a\xb1\x92\x81\x88\x87\xaa\xbd\x82\x6e\x79\x6b\xa6\xcb\xb2\x73\x26\xfb\xce\xa9\x34\x1b\xc0\x5e\xdc\x65\x41\x35\xea\x89\x02\xf2\x61\x00\xf1\x55\x47\x3b\xf0\x95\x37\x3f\xbf\xed\xcc\x71\x8b\x91\x91\xde\x07\x1e\x52\x48\x79\x80\x98\x59\xe6\xa5\xe9\xae\xd5\x35\x65\xd7\x78\x84\x87\xd5\x59\x35\xa9\xb6\x3f\xc2\x85\xc9\x2e\x87\xb9\x65\xbc\xe2\xb1\x10\x9c\x91\x18\xa5\x88\xff\x7a\x4f\x82\x7a\xf7\x11\x2e\x7e\xf1\xe0\x8b\x28\x9f\x03\xf3\xaf\x33\x12\xb6\xbe\x8f\x97\xbb\x9f\xd5\x72\xcb\xc5\x93\x44\x03\x5d\x84\xdc\x7e\x1d\xc7\xc7\xed\x89\xbf\xc9\x42\x4d\xcb\x49\x35\x7f\xbf\xef\xf3\x37\xda\x1b\x35\xa7\x80\x0d\x32\xe4\x87\x31\xfd\x8f\xd1\xed\xea\x6a\x18\x81\xb4\xea\x5e\xb8\xba\x69\x8d\x32\xdb\xe4\x1b\xdf\x95\x3a\x01\x4a\xfd\xa4\x43\xce\x2f\xa8\x60\xe7\x4f\x45\xc3\x5f\xc6\x20\xb6\x6c\xdb\x9d\x13\x56\xbb\x3b\x12\x91\xf6\xdd\xd2\x49\xec\xf2\x53\xf7\x1b\xa8\xa7\x6d\x76\xaf\xe7\x33\xfb\xf4\x46\x7f\x13\x8a\x93\xf7\x9e\xc1\xe4\x0a\x01\x94\x29\xf8\xbe\x0d\xfe\x76\x84\xdb\x19\xcf\x30\xc8\x83\x83\x16\xa2\x8f\x84\x5c\xce\xae\xc5\x04\xa4\x3b\xd6\xca\x57\x0a\x1f\x35\x51\xfd\x58\xa7\x21\xd4\xd2\x61\x60\x41\xf5\x53\x8b\x1f\xef\x41\xc6\xd5\xcc\xc7\xa1\xe0\xd5\xe0\xe1\x6c\x68\xc8\xcf\x6d\x65\xaf\x47\xb6\xee\x1d\xb2\x39\x38\xcd\x1b\x25\x15\xc1\xab\x1a\xaa\x9f\x61\x35\x62\xfd\x50\x83\x60\x72\x0d\xdc\xc4\x4c\x63\xb6\x52\x43\xc7\x7c\xa9\x99\x6a\xe5\x54\x76\x32\xf1\xa2\x8a\x82\xf1\x70\x65\x9e\x90\xf8\x12\x85\xbc\xee\xb1\xce\x9c\x6f\x10\xc6\x52\x4b\x3d\xcf\x8e\xd2\xa9\x7a\x5a\xef\x50\xef\xc3\x8f\x9d\x2e\xbd\x9a\x99\x15\x6a\x56\xe4\xc3\x8e\xbe\x0c\x3b\x2e\x3a\xa7\xd3\xa2\x94\xcf\x57\x17\x8c\xd8\xc9\x99\x48\x12\x6b\x33\x80\x0a\x30\x6c\xb0\x61\xd8\xc9\xfd\xdc\x27\x6f\x79\xa3\x9d\x84\x1f\x6f\xf1\x4f\x8f\x97\xc6\x3b\x3b\x08\x93\xde\x32\x55\x7d\x0d\x18\x66\x5a\xa3\x47\x45\x03\x1f\x7e\xc5\xa5\xe5\x1d\xa4\x75\x5e\x2f\xa2\x5c\x89\xe2\x60\x5d\xa0\x76\x15\xa0\x95\x4c\x58\xd1\x17\x7d\x06\x3b\xf5\x31\x5b\xc1\x90\xc9\xb7\xe5\xb0\x89\x06\x71\x6f\x9a\xf4\xc0\x80\x43\xe9\x5f\x75\x1a\x89\xd6\xcb\x29\x55\xc4\xbf\x45\x4f\x9d\x05\xf7\x54\xb3\x1f\x9e\xce\x46\x9e\xba\x74\x0d\x0f\xc7\xdc\x97\x71\xc5\x1a\x74\x63\xf8\x4a\x69\x47\xf1\x95\x65\xd7\xc7\xda\x00\x6e\xc5\xff\x45\xfe\x91\x22\xdb\xd2\xff\xa7\xe6\x7f\x01\x00\x00\xff\xff\xdd\x71\xb1\xa2\x8b\x06\x00\x00"

func assetsServerTlsSnakeoilKeyBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilKey,
		"assets/server/tls/snakeoil.key",
	)
}

func assetsServerTlsSnakeoilKey() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.key", size: 1675, mode: os.FileMode(420), modTime: time.Unix(1634360857, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/server/.DS_Store": assetsServerDs_store,
	"assets/server/tls/snakeoil.crt": assetsServerTlsSnakeoilCrt,
	"assets/server/tls/snakeoil.key": assetsServerTlsSnakeoilKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"server": &bintree{nil, map[string]*bintree{
			".DS_Store": &bintree{assetsServerDs_store, map[string]*bintree{}},
			"tls": &bintree{nil, map[string]*bintree{
				"snakeoil.crt": &bintree{assetsServerTlsSnakeoilCrt, map[string]*bintree{}},
				"snakeoil.key": &bintree{assetsServerTlsSnakeoilKey, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

